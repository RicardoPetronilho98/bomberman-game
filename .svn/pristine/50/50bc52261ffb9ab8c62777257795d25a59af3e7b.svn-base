import System.Random
import System.Environment
import Text.Read
import Data.Maybe
type Ponto = (Int,Int)

main :: IO ()
main = do a <- getArgs
          let s = readMaybe (a !! 0)
          let l = readMaybe (a !! 1)
          if length a == 2 && isJust s && isJust l && fromJust s >= 5 && odd (fromJust s)
             then putStr $ unlines $ mapa (fromJust s) (fromJust l)
             else putStrLn "Parâmetros inválidos"

randomize :: Int -> Int -> [Int]
randomize size seed = take (nRandomBlocks size) $ randomRs (0,99) (mkStdGen seed) where
    nRandomBlocks n = (n-2)^2 - 12 - nBoulders n where
        nBoulders n = (nlevel n) * (nlevel n) where 
         nlevel 5 = 1
         nlevel n = 1 + nlevel (n - 2)

randomize_to_String :: [Int] -> String
randomize_to_String [] = ""
randomize_to_String (x:xs) | x >= 40 && x <= 99 = " " ++ randomize_to_String xs
                           | otherwise = "?" ++ randomize_to_String xs

randomize_FULL :: [Int] -> String
randomize_FULL [] = ""
randomize_FULL (x:xs) | x >= 40 && x <= 99 = " " ++ randomize_FULL xs
                      | x == 0 || x == 1 = "+" ++ randomize_FULL xs
                      | x >= 4 && x <= 39 = "?" ++ randomize_FULL xs
                      | x == 2 || x == 3 = "!" ++ randomize_FULL xs
----------------------------------------------------------------------------------
----------------------------------------------------------------------------------
drawLine_Leven :: Int -> Int -> Int -> String -> String
drawLine_Leven 2 c size lista | c == 0 = "# #" ++ drawLine_Leven 2 3 size lista
                              | c > 2 && c < (size-3) = [head lista] ++ "#" ++ drawLine_Leven 2 (c+2) size (tail lista) 
                              | c == (size-2) = " #"                             
drawLine_Leven l c size lista | c == 0 = "#" ++ drawLine_Leven l 1 size lista
                              | c > 0 && c < (size-2) = [head lista] ++ "#" ++ drawLine_Leven l (c+2) size (tail lista)
                              | c == (size-2) = [head lista] ++ "#"

drawLine_Lodd :: Int -> Int -> Int -> String -> String
drawLine_Lodd 1 c size lista | c == 0 = "#  " ++ drawLine_Lodd 1 3 size lista
                             | c > 2 && c < (size-3) = [head lista] ++ drawLine_Lodd 1 (c+1) size (tail lista)
                             | c == (size-4) = [last lista] ++ drawLine_Lodd 1 (size-3) size lista
                             | c == (size-3) = "  #" 
drawLine_Lodd l c size lista | c == 0 = "#" ++ drawLine_Lodd l 1 size lista
                             | c > 0 && c < (size-1) = [head lista] ++ drawLine_Lodd l (c+1) size (tail lista) 
                             | c == (size-1) = "#" 
----------------------------------------------------------------------------------
----------------------------------------------------------------------------------
drawMap :: Int -> Int -> Int -> String -> [String]
drawMap l size seed lista | l == 0 = [replicate size '#'] ++ [drawLine_Lodd 1 0 size (newList 1 size seed lista)] ++ [drawLine_Leven 2 0 size (newList 2 size seed lista)] ++ drawMap 3 size seed lista
                          | l > 2 && l < (size-3) && odd l = [drawLine_Lodd l 0 size (newList l size seed lista)] ++ drawMap (l+1) size seed lista
                          | l > 2 && l < (size-3) && even l = [drawLine_Leven l 0 size (newList l size seed lista)] ++ drawMap (l+1) size seed lista
                          | l == (size-3) = [drawLine_Leven 2 0 size (newList (size-3) size seed lista)] ++ [drawLine_Lodd 1 0 size (newList (size-2) size seed lista)] ++ [replicate size '#']

newList :: Int -> Int -> Int -> String -> String
newList l size seed lista | l == 1 = lista
                          | l == 2 = drop (size-6) (newList 1 size seed lista)
                          | l == 3 = drop (size - 2 - (div size 2 + 1)) (newList 2 size seed lista)
                          | l > 2 && l < (size-2) && odd l = drop (size - (div size 2 + 1)) (newList (l-1) size seed lista)
                          | l > 2 && l < (size-2) && even l = drop (size-2) (newList (l-1) size seed lista)
                          | l == (size-3) = drop (size - 2) (newList (l-1) size seed lista)
                          | l == (size-2) = drop (size - 2 - (div size 2 + 1)) (newList (size-3) size seed lista)
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
drawMap1 :: Int -> Int -> Int -> String -> String
drawMap1 l size seed lista | l == 0 = replicate size '#' ++ drawLine_Lodd 1 0 size (newList 1 size seed lista) ++ drawLine_Leven 2 0 size (newList 2 size seed lista) ++ drawMap1 3 size seed lista
                           | l > 2 && l < (size-3) && odd l = drawLine_Lodd l 0 size (newList l size seed lista) ++ drawMap1 (l+1) size seed lista
                           | l > 2 && l < (size-3) && even l = drawLine_Leven l 0 size (newList l size seed lista) ++ drawMap1 (l+1) size seed lista
                           | l == (size-3) = drawLine_Leven 2 0 size (newList (size-3) size seed lista) ++ drawLine_Lodd 1 0 size (newList (size-2) size seed lista) ++ replicate size '#'

findBombs :: Int -> [Ponto] -> [String]
findBombs _ [] = []
findBombs size ((c,l):t) = ("+ " ++ show c ++ " " ++ show l) : findBombs size t  

findFlames :: Int -> [Ponto] -> [String]
findFlames _ [] = []
findFlames size ((c,l):t) = ("! " ++ show c ++ " " ++ show l) : findFlames size t 

coord_bombs_Flames :: Int -> [Int] -> [Ponto]
coord_bombs_Flames _ [] = []
coord_bombs_Flames size (x:xs) = ((abs(((div x size)*size)-x+1)),(div x size)) : coord_bombs_Flames size xs
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
mapa :: Int -> Int -> [String]
mapa size seed = drawMap 0 size seed (randomize_to_String (randomize size seed)) ++ (findBombs size (coord_bombs_Flames size (elemIndices '+' (drawMap1 0 size seed (randomize_FULL (randomize size seed)))))) ++ (findFlames size (coord_bombs_Flames size (elemIndices '!' (drawMap1 0 size seed (randomize_FULL (randomize size seed)))))) 

elemIndices :: Char -> String -> [Int]  
elemIndices a [] = []
elemIndices a l1 = auxEI a l1 1 where
  auxEI b [] _ = []
  auxEI b (y:ys) a | (b==y) = [a] ++ auxEI b ys (a+1)
                   | otherwise = auxEI b ys (a+1)