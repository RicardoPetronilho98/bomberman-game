import Data.Char (isDigit)
import System.Environment
import Solucoes.Solucao1
type Ponto = (Int,Int)

--main :: IO ()
--main = do a <- getArgs
 --         let p = a !! 0
  --        let c = a !! 1
   --       w <- getContents
    --      if length a == 2 && length p == 1 && isDigit (head p) && length c == 1 && head c `elem` "UDLRB"
     --        then putStr $ unlines $ move (lines w) (read p) (head c)
      --       else putStrLn "Parâmetros inválidos"

--função que recebe coordenadas e o mapa e indica se é possivel mover para esse espaço:
what_caracter :: [String] -> Ponto -> Bool
what_caracter mapa (c,l) = if l_aux mapa (c,l) 0 == ' ' then True else False where
  l_aux (x:xs) (c,l) l1 | l == l1 = c_aux x c 0
                          | otherwise = l_aux xs (c,l) (l1+1) where
                            c_aux (x:xs) c c1 | c == c1 = x 
                                              | otherwise = c_aux xs c (c1+1) 

-----------------------------------------------------------------------------------------------------------------------------------------------------
bombs_state :: Ponto -> Int -> Int -> Int -> String  
bombs_state (c,l) player raio time = "* " ++ show c ++ " " ++ show l ++ " " ++ show player ++ " " ++ show raio ++ " " ++ show time   

players_state :: Int -> Ponto -> String 
players_state player (c,l) = show player ++ " " ++ show c ++ " " ++ show l
-----------------------------------------------------------------------------------------------------------------------------------------------------
--função que de acordo com um "move" indica o novo estado de jogo:
walk :: [Int] -> [String] -> Char -> Char -> Ponto -> [String]
walk _ [] _ _ _ = [] --dir ssignifica direção
walk lista estado_mapa player dir (c,l) | dir == 'U' && what_caracter estado_mapa (c,l-1) = new_Position estado_mapa (c,l-1) player 
                                        | dir == 'D' && what_caracter estado_mapa (c,l+1) = new_Position estado_mapa (c,l+1) player
                                        | dir == 'L' && what_caracter estado_mapa (c-1,l) = new_Position estado_mapa (c-1,l) player
                                        | dir == 'R' && what_caracter estado_mapa (c+1,l) = new_Position estado_mapa (c+1,l) player
                                        | dir == 'B' = new_Position estado_mapa (c,l) player
                                        | otherwise = mapa 

--new_Position :: [String] -> Ponto -> Int -> [String]
--new_Position map (c,l) player | elem (c,l) (coord_bombs_Flames size lista) = 
                                  

--o map vai ser (mapa size seed) 
--new_Position ::
--new_Position map x (y-1) player 


--move :: [String] -> Int -> Char -> [String]