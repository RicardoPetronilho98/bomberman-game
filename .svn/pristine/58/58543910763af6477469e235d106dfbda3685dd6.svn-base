\documentclass[a4paper]{article}

\usepackage[utf8]{inputenc}
\usepackage[portuges]{babel}
\usepackage{a4wide}
\usepackage { graphicx }

\title{Projeto de Laboratórios de Informática 1\\Grupo 145}
\author{Ricardo Petronilho (81744) \and Joaquim Simões (xxxxx)}
\date{\today}

\begin{document}

\maketitle

\begin{abstract}
  
  O \emph{resumo} dum relatório deve sumarizar, em não mais que dois
  parágrafos, o trabalho desenvolvido e o relatório em questão,
  incluindo o problema a resolver, os resultados obtidos e as
  conclusões.

\end{abstract}

\tableofcontents

\section{Introdução}
\label{sec:intro}

Nesta unidade curricular foi prosposta a resolução de um projeto informático com dimensão média utilizando a liguagem de programação
funcional \emph{Haskell}. O objetivo do projeto é a re-criação do jogo \emph{Bomberman}. 

A metodologia utilizada neste projeto é a divisão do mesmo em seis tarefas cada uma com um objetivo concreto. Maior parte das tarefas são independentes das restantes a nível de programação no entanto existe uma sequência ideal para uma abordagem consciente e facilitadora do objetico de cada uma.

A sequência cronológica de desenvolvimento do projeto foi desde a tarefa 1 ate a 4 por ordem crescente, no entanto o grupo descidiu desenvolver a quinta tarefa anteriormente á sexta uma vez que facilita a criação da sexta tarefa havendo um feedback instantâneo pois existe a possiblidade de verificação do comportamento do bot (criado na sexta tarefa) através da quinta tarefa. 

Esta sequência de desenvolvimento do projeto não é necessariamente obrigatória e por isso não é de aplicação universal contudo o grupo concluíu que seria a melhor organização e estruturação do mesmo.

Sendo o grupo constítuido por dois elementos, houve uma distribuição das tarefas pelos membros com o propósito de economizar tempo sem prejudicar o conhecimento de cada membro sobre as tarefas não responsaveis por estes, pois os dois membros tiveram sempre acesso ao trabalho de cada um e mantiveram-se atualizados.


\section{Descrição do Problema}
\label{sec:problema}

O objetivo final do projeto é, como já foi dito anteriormente, a criação do jogo clássico \emph{Bomberman}. No entanto devido a metodologia utilizada cada tarefa tem um objetivo de seguida apresentados.

\begin {itemize}

   \item A primeira tarefa implementa um mecanismo de geração de mapas, isto é, a estrutura de ambiente de jogo;
  
   \item A segunda tarefa determina o efeito de um comando (recebido pelo teclado do computador) num estado de jogo genérico;
  
   \item A terceira tarefa implementa um mecanismo de compressão/ descompressão de um estado de jogo com o objetivo de poupar espaço em disco quando o jogo é gravado;
  
   \item A quarta tarefa determina o efeito da passagem de um instante de tempo num estado de jogo genérico;
  
   \item A quinta tarefa implementa o desenvolviento gráfico do ambiente de jogo;
  
   \item A sexta tarefa implementa um bot que jogue \emph{Bomberman} automaticamente.

\end {itemize}

\section{Concepção da Solução}
\label{sec:solucao}

Esta secção deve descrever o trabalho efetivamente desenvolvido pelos
alunos para resolver o problema apresentado na secção
anterior. Segue-se uma sugestão de organização para esta secção.

\subsection{Estruturas de Dados}

Ao longo do desenvolvimento das tarefas o grupo procurou sempre organizar os passos utilizados para concretizar o objetivo final de forma a clarificar e facilitar o trabalho. O mecismo utilizado conciste na divisão de cada tarefa em várias finalidades. Visto que o estado de jogo se fragementa em quatro partes: tabuleiro de jogo, estado dos power ups, estado das bombas e estado dos jogadores foi intuitivo separar cada tarefa em funções com o propósito de modificar cada fragmento de jogo. Na proxima secção demonstramos de que forma adoptamos este mecanismo ao longo das seis tarefas.

\subsection{Implementação}

A primeira tarefa não foi totalmente idealizada em sintonia com o mecanismo descrito uma vez que é a tarefa de ponto de partida do projeto (ainda não estava definido um estado de jogo possivel de ser fragmentado em quatro finalidades) no entanto é notável uma semelhança ao mecanismo exposto pois as funções principais desta tarefa estão organizadas da sequinta forma. 

\begin {itemize}
   
   \item formação/ geração do tabuleiro do jogo (\emph{drawMap e drawMap2}); 

   \item geração do estado dos power ups (\emph{findFlames e findBombs});

\end {itemize}

Visto que esta tarefa não implica a existência de jogadores ou de bombas plantadas o macanismo descrito não é totalmente seguido. 

A segunda tarefa foi realizada utilizando coerentmente o mecanismo pois o estado de jogo recebido por esta tarefa é genérico, ou seja todos os fragmentos do estado de jogo têm de ser consideradas (quer existam ou não). Esta tarefa esta organizada da seguinta forma:

\begin {itemize}

   \item recebendo um estado de jogo qualquer é apresentado apenas o tabuleiro do jogo (\emph{justMap}); 

   \item em função do comando recebido atualiza o estado dos power ups (\emph{new Coordinates});

   \item em função do atual estado de jogo atualiza o novo estado das bombas (\emph{all-bombs-players-state});

   \item em função do comando recebido atualiza o novo estado de jogadores (\emph{all-players-state});

\end {itemize}

Cada uma das funções em cima referidas utilizam diversas funções auxiliares, no entanto todas convergem nessas quatro funções principais.

A terceira tarefa ficou inacabada no entanto tem muitas informações e funções uteis que apesar de não terem finalidade concreta (devido a ter ficado truncada) devem ser apresentadas:

\begin {itemize}

   \item recebendo um valor numérico (em string) codifica o mesmo economizando caracteres (\emph{codex}); 

   \item função inversa á codex, recebendo uma string converte a mesma num valor numérico (em string) (\emph{convert});

   \item recebendo um estado de jogo codifica o tabueleiro do jogo apenas, de forma a economizar caracteres (\emph{encode});

   \item função inversa á encode, recebendo a string (codificada) reverte a mesma numa string correspondente ao tabuleiro (\emph{decode-only-map});

\end {itemize}

A quarta tarefa é coerente ao mecanismo discrito em cima, no entanto foi provavelmente a tarefa mais importante para adquirir conhecimentos em relação a otimização de programação, pois o grupo implementou um novo sistema de manipulação do estado de jogo, utilizamos \emph{Data} para facilitar a programação: 

\begin {itemize}

   \item Celulas = Pedra | Tijolo | Vazio deriving (Show,Eq);
   \item data Power-Up = PU-Bomba Coordenada | PU-Flame Coordenada deriving (Show,Eq);
   \item data Estado-da-Bomba = Bomba-P Quintuplo deriving (Show,Eq);
   \item data Jogador = J Int Coordenada PUs deriving (Show,Eq);

\end {itemize}

Após a criação dos \emph{Data} definimos o novo estado de jogo através de novos \emph{type}:

\begin {itemize}

   \item type Mapa = [[Celulas]];
   \item type Power-Ups = [Power-Up];
   \item type Jogadores = [Jogador];
   \item type Estado-de-jogo = (Mapa, Power-Ups, [Estado-da-Bomba], Jogadores);

\end {itemize}

Desenvolvendo-se o estado de jogo toda a manipulação tornou-se mais concreta e objetiva, sendo as principais funções as seguintes: 

\begin {itemize}

   \item recebendo o estado de jogo em lista de strings converte o mesmo no novo estado de jogo (em \emph{Data}) utilizado nesta tarefa (\emph{estado-de-jogo}); 

   \item função inversa á estado-de-jogo, recebendo o novo estado de jogo (em \emph{Data}) reverte o mesmo no estado de jogo em lista de strings (\emph{reverte-Estado-de-jogo}); 

   \item recebendo o estado de jogo apresenta o tabuleiro atualizado, eleminando os tijolos que foram atingidos por uma bomba (\emph{destapa-tijolo-atingidos})

   \item recbendo o estado de jogo  determina o raio de explosão de todas as bombas que vão explodir numa lista de coordenadas (\emph{raio-acao-de-todas-as-bombas});

   \item recebendo o estado de jogo e o raio de explosão de todas as bombas que vão explodir atualiza o estado de todas as bombas: reduz o tempo a todas as bombas, elemina as que explodirão, provoca a explosão forçada de outra bomba (\emph{atualiza-Bombas});

   \item recebendo o estado de jogo atualiza estado dos power ups, eleminando aqueles que são atingidos por uma bomba (\emph{elimina-Power-Ups});

   \item recebendo o estado de jogo atualiza o estado dos jogadores, eleminando aqueles que foram atingidos por uma bomba (\emph{atualiza-Jogadores});

   \item recebendo uma mapa em lista de strings coloca uma pedra na coordenada correta da espiral (\emph{coloca-pedra});

   \item recebendo um estado de jogo e a coordenada da ultima pedra colocada da espiral atualiza o estado de jogo totalmente, eliminando um power up ou uma bomba ou um jogador no caso da espiral atingir um destes (\emph{retirar-PU-ou-B-ou-J});

\end {itemize}

A quinta tarefa implementa um \emph{record} que facilitou muito o uso de imagens ao longo do desenvolvimento da tarefa:

\begin {itemize}

    \item data Figuras = Figuras { tijolo :: Picture, pedra :: Picture, dirt :: Picture, jogador0 :: Picture, jogador1 :: Picture, jogador2 :: Picture, jogador3 :: Picture, bomba :: Picture, pubomba :: Picture, puflame :: Picture, aba :: Picture, logo :: Picture, relogio :: Picture, preto :: Picture, raio :: Picture };

\end {itemize}

Foi, também, implementado um novo \emph{type} que contém todas as informações necessárias á realização da quinta tarefa: 

\begin{itemize}

    \item type Estado = (Numero-jogador,Dimensao-do-mapa,Estado-de-jogo,Figuras,Time,Var)

\end{itemize}
     
Nesta tarefa a função mais útil para desenhar o estado de jogo é a \emph{desenha-coord}, função que recebe uma coordenada e uma figura, colocando esta na coordenada correta do referencial. Criando esta função tudo se tornou mais simples pois para desenhar o estado de jogo basta evocar recursivamente esta função atualizando as coordenadas e figuras a serem desenhadas através das seguintes funções:

\begin{itemize}

    \item desenha apenas o tabuleiro do mapa (Pedra, Tijolo e Vazio), faltam os jogadores, power ups e bombas plantadas: (\emph{desenha-mapa})

    \item desenha os power ups nas suas respectivas coordenadas no referencial (\emph{aux-put-PU});

    \item desenha os as bombas nas suas respectivas coordenadas no referencial (\emph{aux-put-B}); 

    \item desenha o jogadores power ups nas suas respectivas coordenadas no referencial (\emph{aux-put-J});

    \item desenha a aba lateral do mapa (\emph{desenha-aba});

    \item função na qual todas as funções em cima referidas convergem e produzem como resultado final o estado de jogo totalmente desenhado (\emph{junta-tudo});

    \item função que centra o mapa desenhado (\emph{desenhaEstado}) 

\end{itemize}

A função (\emph{reageEvento}) e (\emph{reageTempo}) foram mais simples de se desenvolver uma vez que apenas evocam funções da segunda tarefa e quarta tarefa respectivamente, no entanto salienta-se o uso de uma variável de controlo na função (\emph{reageTempo}) para obter uma taxa de \emph{frames per second} eficiente. Esta variável é acumulada e adiciona-se recursicamente um valor constante á mesma, quando a soma alcaçar ou for superior a um, o tempo do estado de jogo reduz um segundo.

\subsection{Testes}

Ao longo do desenvolvimento do projeto, o grupo criou vários testes de forma a testar as funcionalidades das soluções desenvolvidas, nomeadamente na segunda e quarta tarefa. De seguida esclarecemos dois testes que são fundamentais para a compreensão das funcionalidades de todo o projeto.

A figura 1 e figura 2 apresentada nos Anexos é o teste que o grupo considera mais importante uma vez que demonstra o efeito de todas as condicionantes envolvidas na tarefa 4. Quando o tempo avança 1 segundo é notável o efeito da reação á passgem do tempo no estado de jogo, uma vez que existem bombas que são forçadas a explodir, outras bombas não alcançam o seu raio de explosão total uma vez que são bloqueadas por power ups, tijolos ou mesmo pedras.

Os restantes exemplos também demonstram diversas funcionalidades das tarefas, no entanto são mais restritos pois não contém tantas condicionantes.

\section{Conclusões}
\label{sec:conclusao}

A secção de \emph{conclusões} resume o restante documento, devendo
também apresentar uma análise crítica dos resultados atingidos tendo
em conta os objetivos definidos.


\section{Anexos}
\label{sec:anexos}

\begin{figure} [t]

  \centering
  \includegraphics [scale=0.50] {teste1.png}
  \caption {exemplo 8 no svn}
  \label {img: teste1}

  \includegraphics [scale=0.40] {solucao1.png}
  \caption {instante 150 do exemplo 8}
  \label {img: solucao1}


\end{figure}


\end{document}